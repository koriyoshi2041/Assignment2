openapi: 3.0.3
info:
  title: Assignment 2 - User Login Service API
  version: 1.0.0
  description: |
    Assignment 2 用户登录服务 MVP - API规范文档
    
    这是一个基于 Go Gin 框架构建的用户认证服务，提供登录和用户信息获取功能。
    
    ## 特性
    - JWT token 认证
    - Bcrypt 密码加密
    - RESTful API 设计
    - CORS 支持
    
    ## 认证流程
    1. 用户通过 `/user/login` 接口进行身份验证
    2. 服务器验证用户名和密码，返回 JWT token
    3. 客户端在后续请求中通过 `Authorization: Bearer <token>` 头部携带 token
    4. 服务器验证 token 有效性，提供相应的服务
    
  contact:
    name: Assignment 2 Developer
    email: developer@example.com

servers:
  - url: http://localhost:8080
    description: 本地开发服务器
  - url: http://localhost:8080
    description: APIFox Mock 服务器 (配置时请替换为实际Mock URL)

paths:
  /user/login:
    post:
      summary: 用户登录
      description: |
        用户身份认证接口。验证用户名和密码，成功后返回 JWT 访问令牌。
        
        ## 认证机制
        - 使用 bcrypt 进行密码哈希验证
        - JWT token 有效期为 24 小时
        - 支持的测试账户：
          - admin / password123
          - user1 / mypassword
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: 用户名
                  example: admin
                  minLength: 1
                  maxLength: 50
                password:
                  type: string
                  description: 密码
                  example: password123
                  minLength: 1
                  maxLength: 100
            examples:
              admin_user:
                summary: 管理员账户
                value:
                  username: admin
                  password: password123
              regular_user:
                summary: 普通用户账户
                value:
                  username: user1
                  password: mypassword
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT 访问令牌
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              examples:
                success_response:
                  summary: 成功响应示例
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjQzNzI4MDAwfQ.signature
        '400':
          description: 请求格式错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_format:
                  summary: 无效的请求格式
                  value:
                    error: Invalid request format
        '401':
          description: 用户名或密码错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: 认证失败
                  value:
                    error: Invalid username or password

  /user/info:
    get:
      summary: 获取用户信息
      description: |
        获取当前登录用户的个人信息。需要在请求头中提供有效的 JWT token。
        
        ## 认证要求
        - 必须在 Authorization 头部提供 Bearer token
        - Token 格式：`Bearer <jwt_token>`
        - Token 必须有效且未过期
      operationId: getUserInfo
      tags:
        - User Information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 成功获取用户信息
          content:
            application/json:
              schema:
                type: object
                properties:
                  nick_name:
                    type: string
                    description: 用户昵称
                    example: 管理员小张
              examples:
                admin_info:
                  summary: 管理员信息
                  value:
                    nick_name: 管理员小张
                user_info:
                  summary: 普通用户信息
                  value:
                    nick_name: 用户小李
        '401':
          description: 未授权访问
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_token:
                  summary: 缺少授权头
                  value:
                    error: Authorization header required
                invalid_format:
                  summary: 无效的 Bearer token 格式
                  value:
                    error: Bearer token required
                invalid_token:
                  summary: 无效的 token
                  value:
                    error: Invalid token
        '404':
          description: 用户不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                user_not_found:
                  summary: 用户未找到
                  value:
                    error: User not found

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: 错误信息描述
          example: Invalid username or password
      required:
        - error

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token 认证
        
        ## 使用方法
        1. 首先调用 `/user/login` 接口获取 token
        2. 在后续请求的 Authorization 头部添加：`Bearer <token>`
        
        ## Token 特性
        - 有效期：24 小时
        - 算法：HS256
        - 包含用户身份信息

tags:
  - name: Authentication
    description: 用户身份认证相关接口
  - name: User Information
    description: 用户信息获取相关接口

# APIFox 特定配置建议
x-apifox-orders:
  - /user/login
  - /user/info

x-apifox-environment:
  variables:
    baseUrl:
      value: http://localhost:8080
      description: API 基础地址
    token:
      value: ""
      description: 从登录接口获取的 JWT token (自动设置)

x-apifox-pre-request-script: |
  // 在每个请求前执行的脚本
  console.log('发送请求到:', pm.request.url);

x-apifox-post-response-script: |
  // 在收到响应后执行的脚本
  if (pm.request.url.includes('/user/login') && pm.response.code === 200) {
    const response = pm.response.json();
    if (response.token) {
      pm.environment.set("token", response.token);
      console.log('Token 已自动保存到环境变量');
    }
  }