/* tslint:disable */
/* eslint-disable */
/**
 * Assignment 3 - Blog System API
 * Assignment 3 Milestone 1 博客系统 MVP - API规范文档  这是一个基于 Go Gin 框架构建的博客系统，提供用户认证、博文创建和浏览功能。  ## 特性 - JWT token 认证 - Bcrypt 密码加密 - GORM 数据库持久化 - 博文创建和列表 - RESTful API 设计 - CORS 支持  ## 认证流程 1. 用户通过 `/user/login` 接口进行身份验证 2. 服务器验证用户名和密码，返回 JWT token 3. 客户端在后续请求中通过 `Authorization: Bearer <token>` 头部携带 token 4. 服务器验证 token 有效性，提供相应的服务 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developer@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePostRequest,
  ErrorResponse,
  PostResponse,
} from '../models/index';
import {
    CreatePostRequestFromJSON,
    CreatePostRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PostResponseFromJSON,
    PostResponseToJSON,
} from '../models/index';

export interface CreatePostOperationRequest {
    createPostRequest: CreatePostRequest;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     * 创建新的博文。需要用户登录认证，博文将关联到当前用户。 
     * 创建博文
     */
    async createPostRaw(requestParameters: CreatePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostResponse>> {
        if (requestParameters['createPostRequest'] == null) {
            throw new runtime.RequiredError(
                'createPostRequest',
                'Required parameter "createPostRequest" was null or undefined when calling createPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/posts`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostRequestToJSON(requestParameters['createPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostResponseFromJSON(jsonValue));
    }

    /**
     * 创建新的博文。需要用户登录认证，博文将关联到当前用户。 
     * 创建博文
     */
    async createPost(requestParameters: CreatePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostResponse> {
        const response = await this.createPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取所有博文的列表，按创建时间倒序排列（最新的在前）。 不需要认证，所有用户都可以浏览。 
     * 获取博文列表
     */
    async listPostsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PostResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/posts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostResponseFromJSON));
    }

    /**
     * 获取所有博文的列表，按创建时间倒序排列（最新的在前）。 不需要认证，所有用户都可以浏览。 
     * 获取博文列表
     */
    async listPosts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PostResponse>> {
        const response = await this.listPostsRaw(initOverrides);
        return await response.value();
    }

}
