/* tslint:disable */
/* eslint-disable */
/**
 * Assignment 3 - Blog System API
 * Assignment 3 Milestone 1 博客系统 MVP - API规范文档  这是一个基于 Go Gin 框架构建的博客系统，提供用户认证、博文创建和浏览功能。  ## 特性 - JWT token 认证 - Bcrypt 密码加密 - GORM 数据库持久化 - 博文创建和列表 - RESTful API 设计 - CORS 支持  ## 认证流程 1. 用户通过 `/user/login` 接口进行身份验证 2. 服务器验证用户名和密码，返回 JWT token 3. 客户端在后续请求中通过 `Authorization: Bearer <token>` 头部携带 token 4. 服务器验证 token 有效性，提供相应的服务 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: developer@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  LoginUser200Response,
  LoginUserRequest,
  LogoutUser200Response,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LoginUser200ResponseFromJSON,
    LoginUser200ResponseToJSON,
    LoginUserRequestFromJSON,
    LoginUserRequestToJSON,
    LogoutUser200ResponseFromJSON,
    LogoutUser200ResponseToJSON,
} from '../models/index';

export interface LoginUserOperationRequest {
    loginUserRequest: LoginUserRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * 用户身份认证接口。验证用户名和密码，成功后返回 JWT 访问令牌。  ## 认证机制 - 使用 bcrypt 进行密码哈希验证 - JWT token 有效期为 24 小时 - 支持的测试账户：   - admin / password123   - user1 / mypassword 
     * 用户登录
     */
    async loginUserRaw(requestParameters: LoginUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginUser200Response>> {
        if (requestParameters['loginUserRequest'] == null) {
            throw new runtime.RequiredError(
                'loginUserRequest',
                'Required parameter "loginUserRequest" was null or undefined when calling loginUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/user/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginUserRequestToJSON(requestParameters['loginUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginUser200ResponseFromJSON(jsonValue));
    }

    /**
     * 用户身份认证接口。验证用户名和密码，成功后返回 JWT 访问令牌。  ## 认证机制 - 使用 bcrypt 进行密码哈希验证 - JWT token 有效期为 24 小时 - 支持的测试账户：   - admin / password123   - user1 / mypassword 
     * 用户登录
     */
    async loginUser(requestParameters: LoginUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginUser200Response> {
        const response = await this.loginUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 用户登出接口。客户端应清除本地存储的 JWT token。 服务端返回成功状态，实际的 token 失效由客户端处理。 
     * 用户登出
     */
    async logoutUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogoutUser200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/user/logout`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogoutUser200ResponseFromJSON(jsonValue));
    }

    /**
     * 用户登出接口。客户端应清除本地存储的 JWT token。 服务端返回成功状态，实际的 token 失效由客户端处理。 
     * 用户登出
     */
    async logoutUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogoutUser200Response> {
        const response = await this.logoutUserRaw(initOverrides);
        return await response.value();
    }

}
